{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","Header","react_router_dom","to","Tournaments","BayesTournaments","map","tournament","index","key","id","concat","name","date_start","date_end","series","TournamentDetails","props","tournamentId","parseInt","match","params","tournamentDetails","find","country","city","Series","BayesSeries","SeriesDetails","seriesId","seriesDetails","App","state","react_router","exact","path","component","React","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d054ebd9.chunk.js","sourcesContent":["import React from 'react';\n//import tournamentsBg from './tournaments.jpg';\n//import seriesBg from './series.jpg';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport BayesTournaments from './bayes-tournaments.json';\nimport BayesSeries from './bayes-series.json';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    //isLoading: true,\n    //tournaments: [],\n    //error: null\n  }\n\n  //var series = [... new Set(BayesTournaments.map(tournament => tournament.series.id))]\n\n  render () {\n    //const { isLoading, tournaments, error } = this.state;\n\n    return (\n      <Router>\n      <div>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/tournaments\" component={Tournaments} />\n        <Route path=\"/tournamentDetails/:id\" component={TournamentDetails} />\n        <Route path=\"/series\" component={Series} />\n        <Route path=\"/seriesDetails/:id\" component={SeriesDetails} />\n\n      </div>\n    </Router>\n    )\n  }\n}\n\nfunction Home() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <main>\n        <Link to=\"/tournaments\" className=\"App-link tournaments-link\">Tournaments</Link>  \n        <Link to=\"/series\" className=\"App-link series-link\">Series</Link>  \n      </main>\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <header className=\"App-header\">\n      <h1>\n        <Link to=\"/\" className=\"\">Bayes E-Sports</Link>\n      </h1>\n    </header>\n  );\n}\n\nfunction Tournaments() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <h2>Tournaments Overview</h2>\n      <main>\n        <table>\n          <tbody>\n          <tr>\n            <th>Name</th>\n            <th>Start</th>\n            <th>End</th>\n            <th>Series</th>\n          </tr>\n        {BayesTournaments.map((tournament, index)=>{\n          return (\n            <tr key={tournament.id}>\n              <td><Link to={`/tournamentDetails/${tournament.id}`} className=\"\">{tournament.name}</Link></td>\n              <td>{tournament.date_start}</td>\n              <td>{tournament.date_end}</td>\n              <td><Link to={`/seriesDetails/${tournament.series.id}`} className=\"\">{tournament.series.name}</Link></td>\n            </tr>\n          )\n        })}\n          </tbody>\n        </table>\n      </main>\n    </div>\n  );\n}\n\nfunction TournamentDetails(props) {\n  let tournamentId = parseInt(props.match.params.id)\n  let tournamentDetails = BayesTournaments.find(tournament => tournament.id === tournamentId)\n\n  return (\n      <div className=\"App\">\n        <Header></Header>\n        <h2>Tournaments Details</h2>\n        <main>\n          <table>\n            <tbody>\n              <tr>\n                <th>ID</th>\n                <td>{tournamentDetails.id}</td>\n              </tr>  \n              <tr>\n                <th>Name</th>\n                <td>{tournamentDetails.name}</td>\n              </tr> \n              <tr>\n                <th>Country</th>\n                <td>{tournamentDetails.country}</td>\n              </tr>\n              <tr>\n                <th>City</th>\n                <td>{tournamentDetails.city}</td>\n              </tr>\n              <tr>\n                <th>Start</th>\n                <td>{tournamentDetails.date_start}</td>\n              </tr>\n              <tr>\n                <th>End</th>\n                <td>{tournamentDetails.date_end}</td>\n              </tr>\n              <tr>\n                <th>Series</th>\n                <td>{tournamentDetails.series.name}</td>\n              </tr>\n            </tbody>\n          </table>\n        </main>\n      </div>\n  )\n}\n\nfunction Series() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <h2>Series Overview</h2>\n      <main>\n        <table>\n          <tbody>\n          <tr>\n            <th>Name</th>\n            <th>Start</th>\n            <th>End</th>\n          </tr>\n        {BayesSeries.map((series, index)=>{\n          return (\n            <tr key={series.id}>\n              <td><Link to={`/seriesDetails/${series.id}`} className=\"\">{series.name}</Link></td>\n              <td>{series.date_start}</td>\n              <td>{series.date_end}</td>\n            </tr>\n          )\n        })}\n          </tbody>\n        </table>\n      </main>\n    </div>\n  );\n}\n\nfunction SeriesDetails(props) {\n  let seriesId = parseInt(props.match.params.id)\n  let seriesDetails = BayesSeries.find(series => series.id === seriesId)\n\n  return (\n      <div className=\"App\">\n        <Header></Header>\n        <h2>Tournaments Details - TODO</h2>\n        <main>\n          <table>\n            <tbody>\n              <tr>\n                <th>ID</th>\n                <td>{seriesDetails.id}</td>\n              </tr>  \n              <tr>\n                <th>Name</th>\n                <td>{seriesDetails.name}</td>\n              </tr> \n              <tr>\n                <th>Start</th>\n                <td>{seriesDetails.date_start}</td>\n              </tr>\n              <tr>\n                <th>End</th>\n                <td>{seriesDetails.date_end}</td>\n              </tr>\n              <tr>\n                <th>Tournaments</th>\n                <td>List of tournaments (TODO)</td>\n              </tr>\n            </tbody>\n          </table>\n        </main>\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}